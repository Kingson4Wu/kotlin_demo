协程是什么?
可挂起的计算实例。 它在概念上类似于线程，在这个意义上，它需要一个代码块运行，并具有类似的生命周期 —— 它可以被创建与启动，但它不绑定到任何特定的线程。它可以在一个线程中挂起其执行，并在另一个线程中恢复。而且，像 future 或 promise 那样，它在完结时可能伴随着某种结果（值或异常）。

上面这段话引用自 Kotlin 官方协程设计文档中对协程的描述. 那么这段话应该怎么理解呢? 首先, 协程需要一个计算实例. 类比与线程, 创建和启动线程同样需要一个计算实例. 对于线程来说, 线程的计算实例是 Runnable, 我们需要把 Runnable 扔给线程才能在线程中完成计算任务. 对于协程来说, 这个计算实例是 suspend 关键字修饰的方法或 lambda 表达式, 我们需要把这个 suspend 关键字修饰的方法或 lambda 表达式扔给协程才能在协程中完成计算任务. 接着, 除了需要一个计算实例之外, 协程中的这个计算实例还必须是可挂起的, 这也是协程和线程的区别. 那么可挂起是什么意思呢? 比如在上面暂停线程与暂停协程的例子中, 线程和协程同样是等待 100ms, 在线程的实现方式中, 是通过调用 Thread#sleep 方法阻塞线程来实现的, 而在协程的实现中, 调用 #delay 实现的等待是不会阻塞任何线程的(协程也是运行在某一条线程上的). 同样是等待, 线程等待的实现方式会阻塞线程, 而协程等待的实现方式不会阻塞线程, 所以就把线程的等待称之为阻塞, 把协程的等待称之为挂起. 同样的, 在上面等待线程执行结束与等待协程执行结束例子中, 线程调用 threadB#join 势必会造成线程 A 的阻塞, 而在协程中, 调用 coroutineB#join 也能实现同样的功能却不会造成任何线程的阻塞.

作者：JBD
链接：https://www.jianshu.com/p/cd2212a85877
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

协程是一个可挂起的计算实例, 和线程的区别就是协程的计算实例在执行某些需要等待的任务时是可挂起的, 不阻塞线程的

----

对于计算密集型的任务不太建议使用协程，计算机密集型的任务需要大量的线程切换，线程切换涉及太多的资源交换

---

互斥
kotlin 为我们提供了Mutex实现线程安全，Mutex通俗点来说就是kotlin的锁，和java 的synchronized和RecentLock对应。

----

Java这种高级语言是不能直接实现协程库的？
只能通过修改字节码的方式？

协程可以复用？？有协程池的概念？
go有
Golang协程池
https://www.zhihu.com/question/302981392
显然不需要，goroutine的初衷就是轻量级的线程，为的就是让你随用随起，结果你又搞个池子来，这不是脱裤子放屁么？你需要的是限制并发，而协程池是一种违背了初衷的方法。

Go写协程池？？好吧，听听这个段子：

乔布斯：给我把厚度再减少3毫米！是的没错，必须再减少3毫米，不管用什么方法！还有，边框必须再小一圈！
……
（上市后，中国，街边）
消费者：来，帮我把IPHONE贴个膜，对了，再加个壳。

并发量大的时候 需要的是一个 coroutine-safe 的 handle 池？

额，我感觉我应该能够说一说这个问题。我以前也觉得Go是不需要复用goroutine，毕竟据说“非常轻量级”……但是，其实很多时候话不能说死了。应该是98.72531%的场景下，你不需要goroutine池，剩下不到2%的case，大多数人应该也遇不到，所以说“不需要协程池”，几乎是正确的。那剩下不到2%的case是啥呢？——超高并发低延时的case，比如做网关。我们的网关目前单机2W+的QPS，是非常极端的场景了。

作者：知乎用户
链接：https://www.zhihu.com/question/302981392/answer/696975303
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

也就是说，虽然go语言在调度Goroutine已经优化的非常完成，并且Goroutine作为轻量级执行流程，也不需要CPU调度器的切换，我们一般在使用的时候，如果想处理一个分支流程，直接go
一下即可。但是，如果无休止的开辟Goroutine依然会出现高频率的调度Groutine，那么依然会浪费很多上下文切换的资源，导致做无用功。所以设计一个Goroutine池限制Goroutine的开辟个数在大型并发场景还是必要的。
所以个人观点：有些场合还是可以使用协程池的。

池化技术本来是用来复用提升性能的。
goroutine的开销极小，不需要通过压榨goroutine的复用来进行提升性能。
但是根据场景的不同，有些人会把池子拿来做限流、限制并发等操作，

---


为什么 Java 坚持多线程不选择协程：<https://www.zhihu.com/question/332042250>

---

Kotlin协程中的线程池
指定协程运行的线程池我们知道要通过Dispatchers，有：

Main： 即UI线程
Default： 通常用于执行CPU密集型任务
IO： 通常用于执行会阻塞线程的任务，比如网络请求，文件读写等

使用我们非常熟悉的newFixedThreadPool静态工厂方法创建了一个线程数固定，拥有无界阻塞任务队列的Java原生线程池

----

kotlin协程，其本质就是操作了java的线程
Dispatchers.IO，内部就是线程池，只不过内部是自己控制线程数量，而不是通过java提供的TreadPoolExector去创建线程池的。
核心线程池数至少是两个。

@JvmField
internal val CORE_POOL_SIZE = systemProp(
    "kotlinx.coroutines.scheduler.core.pool.size",
    AVAILABLE_PROCESSORS.coerceAtLeast(2), // !!! at least two here
    minValue = CoroutineScheduler.MIN_SUPPORTED_POOL_SIZE
)
AVAILABLE_PROCESSORS

internal val AVAILABLE_PROCESSORS = Runtime.getRuntime().availableProcessors()

————————————————
版权声明：本文为CSDN博主「卖炭少年炭治郎」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_38687303/article/details/113701182

---

https://zhuanlan.zhihu.com/p/102124182
Kotlin-JVM中所谓的协程是假协程，本质上还是一套基于原生Java Thread API 的封装。和Go中的协程完全不是一个东西，不要混淆,更谈不上什么性能更好。
OpenJDK正在做JVM的协程实现，项目名称为loom


协程（Coroutine）就是协同程序，而Kotlin协程就是一个基于Java Thread API封装的工具包，帮助我们轻松的写出复杂的并发代码
kotlin协程相较于线程池，并没有什么性能上的优势

作者：Alvin老师
链接：https://www.jianshu.com/p/af2b3cb48cb5
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

